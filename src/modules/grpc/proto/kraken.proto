syntax = "proto3";

package kraken;

// Service definition
service ServiceRegistry {
  rpc registerService (registerServiceRequest) returns (registerServiceResponse) {}
}

service Config {
  rpc getConfig (EmptyRequest) returns (getConfigResponse) {}
}

service Log {
  rpc addLog (addLogRequest) returns (addLogResponse) {}
}

// Request and response messages
message registerServiceRequest {
  string url = 1;
  uint32 heartbeat_duration_in_sec = 2;
  ServiceTypeEnum type = 3;
  string region = 4;
}

message registerServiceResponse {
  bool success = 1;
  optional string message = 2;
  string token = 3;
}

message EmptyRequest {}

message addLogRequest {
  string message = 1;
  string stack = 2;
}

message addLogResponse {
  bool success = 1;
  optional string message = 2;
}

message limitations{
  int32 max_message_length = 1;         // Maximum length of a message
  int32 max_subscriptions = 2;         // Maximum number of subscriptions
  int32 max_filters = 3;               // Maximum number of filters
  int32 max_subid_length = 4;          // Maximum length of a subscription ID
  int32 min_pow_difficulty = 5;        // Minimum proof-of-work difficulty
  bool auth_required = 6;              // Whether authentication is required
  bool payment_required = 7;           // Whether payment is required
  bool restricted_writes = 8;          // Whether writes are restricted
  int32 max_event_tags = 9;            // Maximum number of event tags
  int32 max_content_length = 10;       // Maximum length of content
  int64 created_at_lower_limit = 11;   // Lower limit for creation timestamps
  int64 created_at_upper_limit = 12;   // Upper limit for creation timestamps
}

message getConfigResponse {
  limitations limitations = 1;
  string url = 2;
}

// Enum definitions
enum ServiceTypeEnum {
  UNKNOWN = 0;
  RELAY = 1;
}
