// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v4.25.4
// source: kraken.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "kraken";

/** Enum definitions */
export enum ServiceTypeEnum {
  RELAY = 0,
  UNRECOGNIZED = -1,
}

/** Request and response messages */
export interface registerServiceRequest {
  url: string;
  heartbeatDurationInSec: number;
  type: ServiceTypeEnum;
}

export interface registerServiceResponse {
  success: boolean;
  message?: string | undefined;
  token?: string | undefined;
}

export interface EmptyRequest {
}

/** Configuration messages */
export interface getConfigResponse {
  retention: Retention | undefined;
  fees: Fees | undefined;
  name: string;
  description: string;
  pubkey: string;
  contact: string;
  software: string;
  supportedNips: number[];
  version: string;
  relayCountries: string[];
  languageTags: string[];
  tags: string[];
  postingPolicy: string;
  paymentsUrl: string;
  icon: string;
  url: string;
}

/** Data structure messages */
export interface Retention {
  time: number;
  count: number;
  kinds: number[];
}

export interface Subscription {
  amount: number;
  unit: string;
  period: number;
}

export interface Admission {
  amount: number;
  unit: string;
}

export interface Publication {
  kinds: number[];
  amount: number;
  unit: string;
}

export interface Fees {
  subscription: Subscription[];
  publication: Publication[];
  admission: Admission[];
}

export const KRAKEN_PACKAGE_NAME = "kraken";

/** Service definition */

export interface KrakenServiceRegistryServiceClient {
  registerService(request: registerServiceRequest, metadata?: Metadata): Observable<registerServiceResponse>;
}

/** Service definition */

export interface KrakenServiceRegistryServiceController {
  registerService(
    request: registerServiceRequest,
    metadata?: Metadata,
  ): Promise<registerServiceResponse> | Observable<registerServiceResponse> | registerServiceResponse;
}

export function KrakenServiceRegistryServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["registerService"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("KrakenServiceRegistryService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("KrakenServiceRegistryService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const KRAKEN_SERVICE_REGISTRY_SERVICE_NAME = "KrakenServiceRegistryService";

export interface KrakenConfigServiceClient {
  getConfig(request: EmptyRequest, metadata?: Metadata): Observable<getConfigResponse>;
}

export interface KrakenConfigServiceController {
  getConfig(
    request: EmptyRequest,
    metadata?: Metadata,
  ): Promise<getConfigResponse> | Observable<getConfigResponse> | getConfigResponse;
}

export function KrakenConfigServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getConfig"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("KrakenConfigService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("KrakenConfigService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const KRAKEN_CONFIG_SERVICE_NAME = "KrakenConfigService";
