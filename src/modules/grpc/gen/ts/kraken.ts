// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v4.25.4
// source: kraken.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "kraken";

export enum ServiceTypeEnum {
  RELAY = 0,
  UNRECOGNIZED = -1,
}

export interface registerServiceRequest {
  url: string;
  heartbeatDurationInSec: number;
  type: ServiceTypeEnum;
}

export interface registerServiceResponse {
  success: boolean;
  message?: string | undefined;
}

export const KRAKEN_PACKAGE_NAME = "kraken";

export interface KrakenServiceClient {
  registerService(request: registerServiceRequest): Observable<registerServiceResponse>;
}

export interface KrakenServiceController {
  registerService(
    request: registerServiceRequest,
  ): Promise<registerServiceResponse> | Observable<registerServiceResponse> | registerServiceResponse;
}

export function KrakenServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["registerService"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("KrakenService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("KrakenService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const KRAKEN_SERVICE_NAME = "KrakenService";
