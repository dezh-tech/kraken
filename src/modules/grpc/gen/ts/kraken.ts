// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v3.12.4
// source: kraken.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "kraken";

/** Define the syntax version for Protocol Buffers */

/** Types of services that can be registered */
export enum ServiceTypeEnum {
  /** UNKNOWN - Unknown service type */
  UNKNOWN = 0,
  /** RELAY - Relay service type */
  RELAY = 1,
  UNRECOGNIZED = -1,
}

/** Request to register a service */
export interface registerServiceRequest {
  /** Service URL */
  url: string;
  /** Heartbeat interval in seconds */
  heartbeatDurationInSec: number;
  /** Type of the service (e.g., RELAY) */
  type: ServiceTypeEnum;
  /** Region of the service */
  region: string;
}

/** Response after registering a service */
export interface registerServiceResponse {
  /** Indicates if registration was successful */
  success: boolean;
  /** Optional message with additional information */
  message?:
    | string
    | undefined;
  /** Token assigned to the registered service */
  token: string;
}

/** Empty request used for methods that do not require parameters */
export interface EmptyRequest {
}

/** Request to add a log entry */
export interface addLogRequest {
  /** Log message content */
  message: string;
  /** Stack trace or additional log details */
  stack: string;
}

/** Response after adding a log entry */
export interface addLogResponse {
  /** Indicates if the log entry was successfully added */
  success: boolean;
  /** Optional message with additional information */
  message?: string | undefined;
}

/** Configuration limitations */
export interface limitations {
  /** Maximum allowed message length */
  maxMessageLength: number;
  /** Maximum number of subscriptions allowed */
  maxSubscriptions: number;
  /** Maximum number of filters allowed */
  maxFilters: number;
  /** Maximum length of a subscription ID */
  maxSubidLength: number;
  /** Minimum proof-of-work difficulty */
  minPowDifficulty: number;
  /** Indicates if authentication is required */
  authRequired: boolean;
  /** Indicates if payment is required */
  paymentRequired: boolean;
  /** Indicates if writes are restricted */
  restrictedWrites: boolean;
  /** Maximum number of event tags allowed */
  maxEventTags: number;
  /** Maximum length of content allowed */
  maxContentLength: number;
  /** Lower limit for creation timestamps */
  createdAtLowerLimit: number;
  /** Upper limit for creation timestamps */
  createdAtUpperLimit: number;
}

/** Response containing configuration details */
export interface getConfigResponse {
  /** Configuration limitations */
  limitations:
    | limitations
    | undefined;
  /** Service URL */
  url: string;
}

export const KRAKEN_PACKAGE_NAME = "kraken";

/** ServiceRegistry handles service registration */

export interface ServiceRegistryClient {
  /** Registers a service with the registry */

  registerService(request: registerServiceRequest, metadata?: Metadata): Observable<registerServiceResponse>;
}

/** ServiceRegistry handles service registration */

export interface ServiceRegistryController {
  /** Registers a service with the registry */

  registerService(
    request: registerServiceRequest,
    metadata?: Metadata,
  ): Promise<registerServiceResponse> | Observable<registerServiceResponse> | registerServiceResponse;
}

export function ServiceRegistryControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["registerService"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ServiceRegistry", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ServiceRegistry", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SERVICE_REGISTRY_SERVICE_NAME = "ServiceRegistry";

/** Config service provides configuration details */

export interface ConfigClient {
  /** Retrieves the current configuration */

  getConfig(request: EmptyRequest, metadata?: Metadata): Observable<getConfigResponse>;
}

/** Config service provides configuration details */

export interface ConfigController {
  /** Retrieves the current configuration */

  getConfig(
    request: EmptyRequest,
    metadata?: Metadata,
  ): Promise<getConfigResponse> | Observable<getConfigResponse> | getConfigResponse;
}

export function ConfigControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getConfig"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("Config", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("Config", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CONFIG_SERVICE_NAME = "Config";

/** Log service handles logging operations */

export interface LogClient {
  /** Adds a log entry */

  addLog(request: addLogRequest, metadata?: Metadata): Observable<addLogResponse>;
}

/** Log service handles logging operations */

export interface LogController {
  /** Adds a log entry */

  addLog(
    request: addLogRequest,
    metadata?: Metadata,
  ): Promise<addLogResponse> | Observable<addLogResponse> | addLogResponse;
}

export function LogControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["addLog"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("Log", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("Log", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const LOG_SERVICE_NAME = "Log";
