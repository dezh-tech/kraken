// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v3.12.4
// source: kraken.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "kraken";

/** Enum definitions */
export enum ServiceTypeEnum {
  UNKNOWN = 0,
  RELAY = 1,
  UNRECOGNIZED = -1,
}

/** Request and response messages */
export interface registerServiceRequest {
  url: string;
  heartbeatDurationInSec: number;
  type: ServiceTypeEnum;
  region: string;
}

export interface registerServiceResponse {
  success: boolean;
  message?: string | undefined;
  token: string;
}

export interface EmptyRequest {
}

export interface addLogRequest {
  message: string;
  stack: string;
}

export interface addLogResponse {
  success: boolean;
  message?: string | undefined;
}

/** Configuration messages */
export interface getConfigResponse {
  retention: Retention | undefined;
  fees: Fees | undefined;
  name: string;
  description: string;
  pubkey: string;
  contact: string;
  software: string;
  supportedNips: number[];
  version: string;
  relayCountries: string[];
  languageTags: string[];
  tags: string[];
  postingPolicy: string;
  paymentsUrl: string;
  icon: string;
  url: string;
}

/** Data structure messages */
export interface Retention {
  time: number;
  count: number;
  kinds: number[];
}

export interface Subscription {
  amount: number;
  unit: string;
  period: number;
}

export interface Admission {
  amount: number;
  unit: string;
}

export interface Publication {
  kinds: number[];
  amount: number;
  unit: string;
}

export interface Fees {
  subscription: Subscription[];
  publication: Publication[];
  admission: Admission[];
}

export const KRAKEN_PACKAGE_NAME = "kraken";

/** Service definition */

export interface ServiceRegistryClient {
  registerService(request: registerServiceRequest, metadata?: Metadata): Observable<registerServiceResponse>;
}

/** Service definition */

export interface ServiceRegistryController {
  registerService(
    request: registerServiceRequest,
    metadata?: Metadata,
  ): Promise<registerServiceResponse> | Observable<registerServiceResponse> | registerServiceResponse;
}

export function ServiceRegistryControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["registerService"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ServiceRegistry", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ServiceRegistry", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SERVICE_REGISTRY_SERVICE_NAME = "ServiceRegistry";

export interface ConfigClient {
  getConfig(request: EmptyRequest, metadata?: Metadata): Observable<getConfigResponse>;
}

export interface ConfigController {
  getConfig(
    request: EmptyRequest,
    metadata?: Metadata,
  ): Promise<getConfigResponse> | Observable<getConfigResponse> | getConfigResponse;
}

export function ConfigControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getConfig"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("Config", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("Config", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CONFIG_SERVICE_NAME = "Config";

export interface LogClient {
  addLog(request: addLogRequest, metadata?: Metadata): Observable<addLogResponse>;
}

export interface LogController {
  addLog(
    request: addLogRequest,
    metadata?: Metadata,
  ): Promise<addLogResponse> | Observable<addLogResponse> | addLogResponse;
}

export function LogControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["addLog"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("Log", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("Log", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const LOG_SERVICE_NAME = "Log";
